// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { GetDevLoginData, GetDevLoginResponses, GetSeadocsData, GetSeadocsResponses, PostSeadocsData, PostSeadocsResponses, PostSeadocsErrors, GetSeadocsByIdData, GetSeadocsByIdResponses, GetSeadocsByIdErrors, DeleteUploadsByIdData, DeleteUploadsByIdResponses, DeleteUploadsByIdErrors, GetUploadsByIdData, GetUploadsByIdErrors, GetUploadsData, GetUploadsResponses, PostUploadsData, PostUploadsResponses, PostUploadsErrors, GetUsersMeData, GetUsersMeResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getDevLogin = <ThrowOnError extends boolean = false>(options?: Options<GetDevLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDevLoginResponses, unknown, ThrowOnError>({
        url: '/dev/login',
        ...options
    });
};

export const getSeadocs = <ThrowOnError extends boolean = false>(options: Options<GetSeadocsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSeadocsResponses, unknown, ThrowOnError>({
        url: '/seadocs',
        ...options
    });
};

export const postSeadocs = <ThrowOnError extends boolean = false>(options?: Options<PostSeadocsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSeadocsResponses, PostSeadocsErrors, ThrowOnError>({
        url: '/seadocs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getSeadocsById = <ThrowOnError extends boolean = false>(options: Options<GetSeadocsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSeadocsByIdResponses, GetSeadocsByIdErrors, ThrowOnError>({
        url: '/seadocs/{Id}',
        ...options
    });
};

export const deleteUploadsById = <ThrowOnError extends boolean = false>(options: Options<DeleteUploadsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUploadsByIdResponses, DeleteUploadsByIdErrors, ThrowOnError>({
        url: '/uploads/{Id}',
        ...options
    });
};

export const getUploadsById = <ThrowOnError extends boolean = false>(options: Options<GetUploadsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetUploadsByIdErrors, ThrowOnError>({
        url: '/uploads/{Id}',
        ...options
    });
};

export const getUploads = <ThrowOnError extends boolean = false>(options: Options<GetUploadsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUploadsResponses, unknown, ThrowOnError>({
        url: '/uploads',
        ...options
    });
};

export const postUploads = <ThrowOnError extends boolean = false>(options: Options<PostUploadsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUploadsResponses, PostUploadsErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/uploads',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Получение данных специфичных для Seadox Api
 */
export const getUsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetUsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersMeResponses, unknown, ThrowOnError>({
        url: '/users/me',
        ...options
    });
};