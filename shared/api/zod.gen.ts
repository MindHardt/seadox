// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * AccessLevel
 */
export const zAccessLevel = z.enum([
    'None',
    'Read',
    'Write'
]);

/**
 * CreateDocRequest
 */
export const zCreateDocRequest = z.object({
    parentId: z.optional(z.union([
        z.string().regex(/[A-Z-a-z0-9-_]+/),
        z.null()
    ])),
    name: z.string()
});

/**
 * ShareType
 */
export const zShareType = z.enum([
    'CurrentOnly',
    'Cascades'
]);

/**
 * DocumentShareMode
 */
export const zDocumentShareMode = z.object({
    access: zAccessLevel,
    type: zShareType
});

/**
 * SeadocInfo
 */
export const zSeadocInfo = z.object({
    id: z.string().regex(/[A-Z-a-z0-9-_]+/),
    name: z.string(),
    description: z.string(),
    coverUrl: z.union([
        z.string(),
        z.null()
    ]),
    ownerId: z.string().regex(/[A-Z-a-z0-9-_]+/),
    parentId: z.union([
        z.string().regex(/[A-Z-a-z0-9-_]+/),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime()
});

/**
 * GetIndexResponse
 */
export const zGetIndexResponse = z.object({
    root: z.array(zSeadocInfo),
    bookmarks: z.array(zSeadocInfo)
});

/**
 * IFormFile
 */
export const zIFormFile = z.string();

/**
 * UploadScope
 */
export const zUploadScope = z.enum([
    'Attachment',
    'Avatar',
    'Admin'
]);

/**
 * MigrateUploadRequest
 */
export const zMigrateUploadRequest = z.object({
    url: z.url(),
    scope: zUploadScope
});

/**
 * PaginatedResponseOfSeadocInfo
 */
export const zPaginatedResponseOfSeadocInfo = z.object({
    total: z.int(),
    data: z.array(zSeadocInfo)
});

/**
 * UploadModel
 */
export const zUploadModel = z.object({
    id: z.string().regex(/[A-Z-a-z0-9-_]+/),
    uploaderId: z.string().regex(/[A-Z-a-z0-9-_]+/),
    hash: z.string().regex(/[0-9A-F]{64}/),
    contentType: z.string(),
    fileName: z.string(),
    fileSize: z.coerce.bigint(),
    uploadTime: z.iso.datetime(),
    scope: zUploadScope
});

/**
 * PaginatedResponseOfUploadModel
 */
export const zPaginatedResponseOfUploadModel = z.object({
    total: z.int(),
    data: z.array(zUploadModel)
});

/**
 * SeadocModel
 */
export const zSeadocModel = z.object({
    accessLevel: zAccessLevel,
    share: zDocumentShareMode,
    lineage: z.array(zSeadocInfo),
    children: z.array(zSeadocInfo),
    id: z.string().regex(/[A-Z-a-z0-9-_]+/),
    name: z.string(),
    description: z.string(),
    coverUrl: z.union([
        z.string(),
        z.null()
    ]),
    ownerId: z.string().regex(/[A-Z-a-z0-9-_]+/),
    parentId: z.union([
        z.string().regex(/[A-Z-a-z0-9-_]+/),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime()
});

/**
 * SeadoxUserModel
 */
export const zSeadoxUserModel = z.object({
    id: z.string().regex(/[A-Z-a-z0-9-_]+/),
    zitadelId: z.coerce.bigint(),
    avatarUrl: z.union([
        z.string(),
        z.null()
    ]),
    color: z.string().regex(/^#[a-f0-9]{6}$/)
});

/**
 * UpdateDocRequestBody
 */
export const zUpdateDocRequestBody = z.object({
    name: z.string(),
    description: z.string(),
    coverUrl: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    share: zDocumentShareMode
});

/**
 * UpdateMeRequest
 */
export const zUpdateMeRequest = z.object({
    color: z.optional(z.union([
        z.string().regex(/^#[a-f0-9]{6}$/),
        z.null()
    ])),
    avatarUrl: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zDeleteSeadocsByIdBookmarkData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string().regex(/[A-Z-a-z0-9-_]+/)
    }),
    query: z.optional(z.never())
});

export const zPostSeadocsByIdBookmarkData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string().regex(/[A-Z-a-z0-9-_]+/)
    }),
    query: z.optional(z.never())
});

export const zGetDevLoginData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zGetSeadocsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        Query: z.optional(z.string()),
        Offset: z.optional(z.int()).default(0),
        Limit: z.optional(z.int()).default(10)
    }))
});

/**
 * OK
 */
export const zGetSeadocsResponse = zPaginatedResponseOfSeadocInfo;

export const zPostSeadocsData = z.object({
    body: z.optional(zCreateDocRequest),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPostSeadocsResponse = zSeadocModel;

export const zDeleteSeadocsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string().regex(/[A-Z-a-z0-9-_]+/)
    }),
    query: z.optional(z.never())
});

export const zGetSeadocsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string().regex(/[A-Z-a-z0-9-_]+/)
    }),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetSeadocsByIdResponse = zSeadocModel;

export const zPatchSeadocsByIdData = z.object({
    body: zUpdateDocRequestBody,
    path: z.object({
        Id: z.string().regex(/[A-Z-a-z0-9-_]+/)
    }),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPatchSeadocsByIdResponse = zSeadocModel;

export const zGetSeadocsByIdContentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string().regex(/[A-Z-a-z0-9-_]+/)
    }),
    query: z.optional(z.never())
});

/**
 * No Content
 */
export const zGetSeadocsByIdContentResponse = z.void();

export const zPutSeadocsByIdContentData = z.object({
    body: z.object({
        Content: zIFormFile
    }),
    path: z.object({
        Id: z.string().regex(/[A-Z-a-z0-9-_]+/)
    }),
    query: z.optional(z.never())
});

export const zGetSeadocsIndexData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetSeadocsIndexResponse = zGetIndexResponse;

export const zDeleteUploadsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string()
    }),
    query: z.optional(z.never())
});

export const zGetUploadsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string()
    }),
    query: z.optional(z.never())
});

export const zGetUploadsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        Scope: z.optional(z.enum([
            'Attachment',
            'Avatar',
            'Admin'
        ])),
        Query: z.optional(z.string()),
        Offset: z.optional(z.int()).default(0),
        Limit: z.optional(z.int()).default(10)
    }))
});

/**
 * OK
 */
export const zGetUploadsResponse = zPaginatedResponseOfUploadModel;

export const zPostUploadsData = z.object({
    body: z.object({
        File: zIFormFile
    }).and(z.object({
        Scope: zUploadScope
    })),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPostUploadsResponse = zUploadModel;

export const zPostUploadsMigrateData = z.object({
    body: z.optional(zMigrateUploadRequest),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPostUploadsMigrateResponse = zUploadModel;

export const zGetUsersMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetUsersMeResponse = zSeadoxUserModel;

export const zPatchUsersMeData = z.object({
    body: z.optional(zUpdateMeRequest),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPatchUsersMeResponse = zSeadoxUserModel;
