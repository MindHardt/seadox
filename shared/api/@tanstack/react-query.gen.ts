// This file is auto-generated by @hey-api/openapi-ts

import { type Options, deleteSeadocsByIdBookmark, postSeadocsByIdBookmark, getDevLogin, getSeadocs, postSeadocs, deleteSeadocsById, getSeadocsById, patchSeadocsById, getSeadocsByIdContent, putSeadocsByIdContent, getSeadocsIndex, deleteUploadsById, getUploadsById, getUploads, postUploads, postUploadsMigrate, getUsersMe, patchUsersMe } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions } from '@tanstack/react-query';
import type { DeleteSeadocsByIdBookmarkData, PostSeadocsByIdBookmarkData, GetDevLoginData, GetSeadocsData, PostSeadocsData, PostSeadocsResponse, DeleteSeadocsByIdData, GetSeadocsByIdData, PatchSeadocsByIdData, PatchSeadocsByIdResponse, GetSeadocsByIdContentData, PutSeadocsByIdContentData, GetSeadocsIndexData, DeleteUploadsByIdData, GetUploadsByIdData, GetUploadsData, PostUploadsData, PostUploadsResponse, PostUploadsMigrateData, PostUploadsMigrateResponse, GetUsersMeData, PatchUsersMeData, PatchUsersMeResponse } from '../types.gen';
import { client } from '../client.gen';

export const deleteSeadocsByIdBookmarkMutation = (options?: Partial<Options<DeleteSeadocsByIdBookmarkData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteSeadocsByIdBookmarkData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteSeadocsByIdBookmarkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteSeadocsByIdBookmark({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postSeadocsByIdBookmarkMutation = (options?: Partial<Options<PostSeadocsByIdBookmarkData>>): UseMutationOptions<unknown, DefaultError, Options<PostSeadocsByIdBookmarkData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostSeadocsByIdBookmarkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postSeadocsByIdBookmark({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getDevLoginQueryKey = (options?: Options<GetDevLoginData>) => createQueryKey('getDevLogin', options);

export const getDevLoginOptions = (options?: Options<GetDevLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDevLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDevLoginQueryKey(options)
    });
};

export const getSeadocsQueryKey = (options?: Options<GetSeadocsData>) => createQueryKey('getSeadocs', options);

export const getSeadocsOptions = (options?: Options<GetSeadocsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSeadocs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSeadocsQueryKey(options)
    });
};

export const postSeadocsMutation = (options?: Partial<Options<PostSeadocsData>>): UseMutationOptions<PostSeadocsResponse, DefaultError, Options<PostSeadocsData>> => {
    const mutationOptions: UseMutationOptions<PostSeadocsResponse, DefaultError, Options<PostSeadocsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postSeadocs({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteSeadocsByIdMutation = (options?: Partial<Options<DeleteSeadocsByIdData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteSeadocsByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteSeadocsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteSeadocsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSeadocsByIdQueryKey = (options: Options<GetSeadocsByIdData>) => createQueryKey('getSeadocsById', options);

export const getSeadocsByIdOptions = (options: Options<GetSeadocsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSeadocsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSeadocsByIdQueryKey(options)
    });
};

export const patchSeadocsByIdMutation = (options?: Partial<Options<PatchSeadocsByIdData>>): UseMutationOptions<PatchSeadocsByIdResponse, DefaultError, Options<PatchSeadocsByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchSeadocsByIdResponse, DefaultError, Options<PatchSeadocsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchSeadocsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSeadocsByIdContentQueryKey = (options: Options<GetSeadocsByIdContentData>) => createQueryKey('getSeadocsByIdContent', options);

export const getSeadocsByIdContentOptions = (options: Options<GetSeadocsByIdContentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSeadocsByIdContent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSeadocsByIdContentQueryKey(options)
    });
};

export const putSeadocsByIdContentMutation = (options?: Partial<Options<PutSeadocsByIdContentData>>): UseMutationOptions<unknown, DefaultError, Options<PutSeadocsByIdContentData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutSeadocsByIdContentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putSeadocsByIdContent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSeadocsIndexQueryKey = (options?: Options<GetSeadocsIndexData>) => createQueryKey('getSeadocsIndex', options);

export const getSeadocsIndexOptions = (options?: Options<GetSeadocsIndexData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSeadocsIndex({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSeadocsIndexQueryKey(options)
    });
};

export const deleteUploadsByIdMutation = (options?: Partial<Options<DeleteUploadsByIdData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteUploadsByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteUploadsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteUploadsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUploadsByIdQueryKey = (options: Options<GetUploadsByIdData>) => createQueryKey('getUploadsById', options);

export const getUploadsByIdOptions = (options: Options<GetUploadsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUploadsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUploadsByIdQueryKey(options)
    });
};

export const getUploadsQueryKey = (options?: Options<GetUploadsData>) => createQueryKey('getUploads', options);

export const getUploadsOptions = (options?: Options<GetUploadsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUploads({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUploadsQueryKey(options)
    });
};

export const postUploadsMutation = (options?: Partial<Options<PostUploadsData>>): UseMutationOptions<PostUploadsResponse, DefaultError, Options<PostUploadsData>> => {
    const mutationOptions: UseMutationOptions<PostUploadsResponse, DefaultError, Options<PostUploadsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postUploads({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postUploadsMigrateMutation = (options?: Partial<Options<PostUploadsMigrateData>>): UseMutationOptions<PostUploadsMigrateResponse, DefaultError, Options<PostUploadsMigrateData>> => {
    const mutationOptions: UseMutationOptions<PostUploadsMigrateResponse, DefaultError, Options<PostUploadsMigrateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postUploadsMigrate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUsersMeQueryKey = (options?: Options<GetUsersMeData>) => createQueryKey('getUsersMe', options);

/**
 * Получение данных специфичных для Seadox Api
 */
export const getUsersMeOptions = (options?: Options<GetUsersMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsersMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersMeQueryKey(options)
    });
};

/**
 * Изменение профиля в Seadox
 */
export const patchUsersMeMutation = (options?: Partial<Options<PatchUsersMeData>>): UseMutationOptions<PatchUsersMeResponse, DefaultError, Options<PatchUsersMeData>> => {
    const mutationOptions: UseMutationOptions<PatchUsersMeResponse, DefaultError, Options<PatchUsersMeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchUsersMe({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
