services:
  postgres:
    restart: unless-stopped
    image: postgres:17.4
    ports: [ "5432:5432" ]
    environment: [ "POSTGRES_PASSWORD=postgres" ]
    volumes:
      - "./.docker-volumes/postgres:/var/lib/postgresql/data"
      - "./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # admin: zitadel-admin@zitadel.localhost - ARN-cLu-H5x-qhp
  # user: user@seadox.ru - iJd-PM3-Uc7-zJK
  zitadel:
    restart: unless-stopped
    image: 'ghcr.io/zitadel/zitadel:v4.2.0'
    command: 'start-from-init --masterkey "MasterkeyNeedsToHave32Characters" --tlsMode disabled'
    environment:
      ZITADEL_DATABASE_POSTGRES_HOST: postgres
      ZITADEL_DATABASE_POSTGRES_PORT: 5432
      ZITADEL_DATABASE_POSTGRES_DATABASE: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_USERNAME: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_PASSWORD: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE: disable
      ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME: postgres
      ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD: postgres
      ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE: disable
      ZITADEL_EXTERNALSECURE: false
    depends_on:
      postgres:
        condition: 'service_healthy'
    ports: [ '8001:8080' ]
    healthcheck:
      test: [ "CMD", "/app/zitadel", "ready", "--config", "/zitadel.yaml" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  cache:
    restart: unless-stopped
    image: valkey/valkey:8.1
    ports: [ "6379:6379" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
  minio:
    restart: unless-stopped
    image: quay.io/minio/minio:latest
    ports: [ "9000:9000", "9001:9001" ]
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio-user
      MINIO_ROOT_PASSWORD: minio-password
    volumes: [ "./.docker-volumes/minio:/data" ]
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
  seq:
    restart: unless-stopped
    image: datalust/seq:2025.2
    ports: [ "5341:80" ]
    environment:
      ACCEPT_EULA: Y
      SEQ_FIRSTRUN_NOAUTHENTICATION: true
    volumes: [ "./.docker-volumes/seq:/data" ]
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://localhost:80/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
  rabbit:
    restart: unless-stopped
    image: rabbitmq:4.1-management
    ports: [ "5672:5672", "15672:15672" ]
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes: [ "./.docker-volumes/rabbit:/var/lib/rabbitmq" ]
    
  # --- Seadox ---
  
  core-api:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./coreapi/Dockerfile
    ports: [ "8080:8080" ]
    depends_on:
      postgres:
        condition: service_healthy
      seq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://localhost:8080/healthz" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      ASPNETCORE_ENVIRONMENT: Staging
      Zitadel__Authority: http://zitadel:8080
      Zitadel__HostMask: localhost:8001
      ConnectionStrings__Postgres: Host=postgres; User Id=coreapi; Password=coreapi; Database=coreapi; Include Error Detail=true
      ConnectionStrings__Redis: cache
      S3__ServiceUrl: http://minio:9000
      Serilog__WriteTo__1__Args__serverUrl: http://seq:5341
      
  ws:
    restart: unless-stopped
    build:
      context: .
      target: ws
    env_file: [ ws/.env ]
    environment:
      BACKEND_URL: http://core-api:8080
      SEQ_URL: http://seq:5341
    ports: ['1234:1234']
    depends_on:
      core-api:
        condition: service_healthy

  web:
    restart: unless-stopped
    build:
      context: .
      target: web
      args:
        VITE_WS_URL: ws://localhost:1234
        VITE_ZITADEL_URL: http://localhost:8001
    env_file: [ web/.env.development ]
    environment:
      BACKEND_URL: http://core-api:8080
      VITE_WS_URL: ws://localhost:1234
      VITE_ZITADEL_URL: http://localhost:8001
      ZITADEL_URL: http://zitadel:8080
      ZITADEL_CLIENT_ID: 337541527272226818
      SEQ_URL: http://seq:5431
    ports: ['3000:3000']
